// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FarAwayClient.Models;

public partial class Db : DbContext
{
    public Db(DbContextOptions<Db> options)
        : base(options)
    {
    }

    public virtual DbSet<AdditionalServicesForRent> AdditionalServicesForRents { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<BranchCharacteristic> BranchCharacteristics { get; set; }

    public virtual DbSet<FrequencyOfService> FrequencyOfServices { get; set; }

    public virtual DbSet<ListOfAdditionalService> ListOfAdditionalServices { get; set; }

    public virtual DbSet<ParkingSpaceRental> ParkingSpaceRentals { get; set; }

    public virtual DbSet<ParkingSpot> ParkingSpots { get; set; }

    public virtual DbSet<ParkingSpotStatus> ParkingSpotStatuses { get; set; }

    public virtual DbSet<RentalStatus> RentalStatuses { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ServiceProvider> ServiceProviders { get; set; }

    public virtual DbSet<TypeOfRentByDuration> TypeOfRentByDurations { get; set; }

    public virtual DbSet<TypesOfCarExchangeSystem> TypesOfCarExchangeSystems { get; set; }

    public virtual DbSet<TypesOfParking> TypesOfParkings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdditionalServicesForRent>(entity =>
        {
            entity.HasKey(e => new { e.IdRent, e.IdService });

            entity.ToTable("AdditionalServicesForRent");

            entity.Property(e => e.IdRent).HasColumnName("idRent");
            entity.Property(e => e.IdService).HasColumnName("idService");
            entity.Property(e => e.IdServiceProviders).HasColumnName("idServiceProviders");

            entity.HasOne(d => d.FrequencyOfServicePerformanceInDaysNavigation).WithMany(p => p.AdditionalServicesForRents)
                .HasForeignKey(d => d.FrequencyOfServicePerformanceInDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdditionalServicesForRent_FrequencyOfServices");

            entity.HasOne(d => d.IdRentNavigation).WithMany(p => p.AdditionalServicesForRents)
                .HasForeignKey(d => d.IdRent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdditionalServicesForRent_ParkingSpaceRental");

            entity.HasOne(d => d.IdServiceNavigation).WithMany(p => p.AdditionalServicesForRents)
                .HasForeignKey(d => d.IdService)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdditionalServicesForRent_ListOfAdditionalServices");

            entity.HasOne(d => d.IdServiceProvidersNavigation).WithMany(p => p.AdditionalServicesForRents)
                .HasForeignKey(d => d.IdServiceProviders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdditionalServicesForRent_ServiceProviders");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.IdTypeOfCarExchangeSystem).HasColumnName("idTypeOfCarExchangeSystem");
            entity.Property(e => e.IdTypeOfParking).HasColumnName("idTypeOfParking");

            entity.HasOne(d => d.IdTypeOfCarExchangeSystemNavigation).WithMany(p => p.Branches)
                .HasForeignKey(d => d.IdTypeOfCarExchangeSystem)
                .HasConstraintName("FK_Branches_TypesOfCarExchangeSystem");

            entity.HasOne(d => d.IdTypeOfParkingNavigation).WithMany(p => p.Branches)
                .HasForeignKey(d => d.IdTypeOfParking)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Branches_TypesOfParking");
        });

        modelBuilder.Entity<BranchCharacteristic>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.TheCostOfAparkingSpacePerDay)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("TheCostOfAParkingSpacePerDay");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BranchCharacteristic)
                .HasForeignKey<BranchCharacteristic>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchCharacteristics_Branches");
        });

        modelBuilder.Entity<FrequencyOfService>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FrequencyName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ListOfAdditionalService>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ServiceDescription).IsRequired();
            entity.Property(e => e.ServiceName).IsRequired();
            entity.Property(e => e.ServicePrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<ParkingSpaceRental>(entity =>
        {
            entity.ToTable("ParkingSpaceRental");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdParkingSpot).HasColumnName("idParkingSpot");
            entity.Property(e => e.IdRentalStatus).HasColumnName("idRentalStatus");
            entity.Property(e => e.IdTypeOfRentByDuration).HasColumnName("idTypeOfRentByDuration");
            entity.Property(e => e.IdUser).HasColumnName("idUser");
            entity.Property(e => e.RentEndDate).HasColumnType("date");
            entity.Property(e => e.RentalStartDate).HasColumnType("date");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.IdParkingSpotNavigation).WithMany(p => p.ParkingSpaceRentals)
                .HasForeignKey(d => d.IdParkingSpot)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpaceRental_ParkingSpots");

            entity.HasOne(d => d.IdRentalStatusNavigation).WithMany(p => p.ParkingSpaceRentals)
                .HasForeignKey(d => d.IdRentalStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpaceRental_RentalStatuses");

            entity.HasOne(d => d.IdTypeOfRentByDurationNavigation).WithMany(p => p.ParkingSpaceRentals)
                .HasForeignKey(d => d.IdTypeOfRentByDuration)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpaceRental_TypeOfRentByDuration");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.ParkingSpaceRentals)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpaceRental_Users");
        });

        modelBuilder.Entity<ParkingSpot>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdBranch).HasColumnName("idBranch");
            entity.Property(e => e.IdParkingSpotStatus).HasColumnName("idParkingSpotStatus");

            entity.HasOne(d => d.IdBranchNavigation).WithMany(p => p.ParkingSpots)
                .HasForeignKey(d => d.IdBranch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpots_Branches");

            entity.HasOne(d => d.IdParkingSpotStatusNavigation).WithMany(p => p.ParkingSpots)
                .HasForeignKey(d => d.IdParkingSpotStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpots_ParkingSpotStatuses");
        });

        modelBuilder.Entity<ParkingSpotStatus>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<RentalStatus>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<ServiceProvider>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.Itin)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("ITIN");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(11);
        });

        modelBuilder.Entity<TypeOfRentByDuration>(entity =>
        {
            entity.ToTable("TypeOfRentByDuration");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PriceCoefficient).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(40);
        });

        modelBuilder.Entity<TypesOfCarExchangeSystem>(entity =>
        {
            entity.ToTable("TypesOfCarExchangeSystem");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.TypeName).IsRequired();
        });

        modelBuilder.Entity<TypesOfParking>(entity =>
        {
            entity.ToTable("TypesOfParking");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.TypeName).IsRequired();
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.IdRole).HasColumnName("idRole");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Password).IsRequired();
            entity.Property(e => e.Patronymic).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(11);
            entity.Property(e => e.Photo).IsRequired();
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(40);

            entity.HasOne(d => d.IdRoleNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.IdRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_Roles");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}