@page
@using FarAwayClient.Models
@using FarAwayClient.Tools.DbEnums
@model FarAwayClient.Pages.Account.RentalCreateModel
@{
    ViewData["Title"] = "Арендовать п/м";
    int index = 0;
}
@section Styles {
    <style>
        html,
        body {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
    </style>
}
<div class="container px-4 pt-4">
    <h1 class="pb-2 border-bottom text-center mb-5">Арендовать парковочное место</h1>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
        @foreach (Branch branch in Model.Branches)
        {
            string coordinates = await Model.GetCoordinatesAsync(branch.Address);

            <div class="col">
                <div class="card shadow-sm">
                    <div id="map-@branch.Id" class="map card-img-top" width="100%" height="225" data-coordinates="@coordinates" data-address="@branch.Address"></div>
                    <div class="card-body">
                        <h5 class="card-title">@branch.Address</h5>
                        <h6 class="card-subtitle mb-2 text-body-secondary">Количество свободных парковочных мест: @branch.ParkingSpots.Where(s => s.IdParkingSpotStatus == ParkingSpotsStatuses.Available).Count()</h6>
                        <p class="card-text">@branch.IdTypeOfParkingNavigation.TypeName, оснащённая типом обмена автомобилей: @branch.IdTypeOfCarExchangeSystemNavigation.TypeName.ToLower()</p>
                        <a class="btn btn-primary" asp-page="/Account/CheckOut" asp-route-id="@branch.Id">Арендовать место</a>
                    </div>
                </div>
            </div>

            index++;
            if (index == 2)
            {
                break;
            }
        }
    </div>

</div>

@section Scripts {
    <script src="https://api-maps.yandex.ru/v3/?apikey=@Model.ApiKey&lang=ru_RU"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            initMaps();
        });

        async function initMaps() {
            await ymaps3.ready;

            const { YMap, YMapDefaultSchemeLayer, YMapDefaultFeaturesLayer, YMapMarker } = ymaps3;
            const maps = document.querySelectorAll(".map");

            maps.forEach(mapElement => {
                console.log(mapElement.dataset.coordinates)
                const coordinates = mapElement.dataset.coordinates.split(' ').map(parseFloat);
                const map = new YMap(
                    mapElement,
                    {
                        location: {
                            center: [coordinates[0], coordinates[1]], // используем координаты парковки
                            zoom: 10
                        }
                    }
                );
                map.addChild(new YMapDefaultSchemeLayer());
                map.addChild(new YMapDefaultFeaturesLayer());

                const content = document.createElement('div');
                content.className = 'custom-marker';

                const marker = new YMapMarker(
                    {
                        coordinates: [coordinates[0], coordinates[1]],
                    },
                    content
                );

                map.addChild(marker);

                content.innerHTML = `
                            <div class="marker-icon">
                                <img src="/assets/icons/location.png" alt="Icon" />
                            </div>
                        `;
            });
        }
    </script>
}